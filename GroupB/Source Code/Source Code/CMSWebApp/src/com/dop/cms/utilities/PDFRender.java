package com.dop.cms.utilities;

import java.io.IOException;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.dop.cms.PatWs.PatientServiceStub;
import com.dop.cms.PatWs.PatientServiceStub.Bill;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * Servlet implementation class PDFRender
 */
@WebServlet("/PDFRender")
public class PDFRender extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static String patient=null;
	private static String appt=null;
	private static Bill bill = null;
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);
	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public PDFRender() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		ServletOutputStream os = response.getOutputStream();
		System.out.println("PDF for :"+request.getParameter("patientId")+" "+request.getParameter("appt"));
		patient=request.getParameter("patientId");
		appt=request.getParameter("appt");
		
		try{
			String endpoint = WSCallURL.PATIENTMODULE;
			PatientServiceStub proxy = new PatientServiceStub(endpoint);
			PatientServiceStub.RequestBillE spec = new PatientServiceStub.RequestBillE();
			PatientServiceStub.RequestBillResponseE resp = new PatientServiceStub.RequestBillResponseE();
			PatientServiceStub.RequestBill in = new PatientServiceStub.RequestBill();
			in.setArg0(patient);
			in.setArg1(appt);
			spec.setRequestBill(in);
			resp = proxy.requestBill(spec);
			setBill(resp.getRequestBillResponse().get_return());
		}catch (Exception e) {
			System.out.println(e.toString());
		}
		
		
		//set the response content type to PDF
		  response.setContentType("application/pdf"); 
		Document document = new Document();
		try {
			PdfWriter.getInstance(document, os);
			document.open();
			addMetaData(document);
			addTitlePage(document);
			addContent(document);
			document.close();
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	private static void addMetaData(Document document) {
		document.addTitle("Report for Patient "+patient);
		document.addSubject("Generated from CMS");
		document.addKeywords(" ");
		document.addAuthor("CMS");
		document.addCreator("Clinic Management System");
	}

	private static void addTitlePage(Document document)
			throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Patient Report", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by CMS on " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph("The document hold Patient, Billing, Diagnosis and Medicine Information  \nAppointment Date : "+appt,
				smallBold));

		addEmptyLine(preface, 10);

		preface.add(new Paragraph("Document holds sensitive data",
				redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private static void addContent(Document document) throws DocumentException {
		Anchor anchor = new Anchor("Details", catFont);
		anchor.setName("");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		Paragraph subPara = new Paragraph("Appointment Details", subFont);
		Section subCatPart = catPart.addSection(subPara);
		String tmp = "\nCase Id: "+bill.getDoctor().getCaseId()+"\nDoctor Id :  "+bill.getDoctor().getDoctorID()+"\nDoctor Name :  "+bill.getDoctor().getDoctorName()+"\nDiagnosis :  "+bill.getDoctor().getDiagnosis()+"\n\n";
		subCatPart.add(new Paragraph(tmp));
		
		subPara = new Paragraph("Lab Reports", subFont);
		tmp = "\nReport Id: "+bill.getReport().getReportId()+"\nTest Type: "+bill.getReport().getTest_type();
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph(tmp));


		// add a list
//		createList(subCatPart);
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 2);
		subCatPart.add(paragraph);
		subPara = new Paragraph("Bill Information", subFont);
		addEmptyLine(subPara, 1);
		subCatPart = catPart.addSection(subPara);
		// add a table
		createTable(subCatPart);

		document.add(catPart);

	}

	private static void createTable(Section subCatPart)
			throws BadElementException {
		PdfPTable table = new PdfPTable(3);
		PdfPCell c1 = new PdfPCell(new Phrase("Type"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Charge"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Total"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);
		double total=0;
		table.addCell("Doctor: "+bill.getDoctor().getDoctorName());
		table.addCell(Double.toString(bill.getDoctor().getCost()));
		table.addCell(Double.toString(bill.getDoctor().getCost()));
		table.addCell("Lab Report");
		table.addCell(Double.toString(bill.getReport().getCost()));
		table.addCell(Double.toString(bill.getReport().getCost()));
		total = bill.getReport().getCost() + bill.getDoctor().getCost();
		if(null!=bill.getMedicine())
		for (int i = 0; i < bill.getMedicine().length; i++) {
			table.addCell("Medicine "+bill.getMedicine()[i].getMedicineId());
			table.addCell("Qty("+bill.getMedicine()[i].getQuantity()+")*"+bill.getMedicine()[i].getPrice());
			total = Double.parseDouble(bill.getMedicine()[i].getQuantity())*bill.getMedicine()[i].getPrice()+total;
			table.addCell(Double.toString(Double.parseDouble(bill.getMedicine()[i].getQuantity())*bill.getMedicine()[i].getPrice()));
		}
		table.addCell("");
		table.addCell("Tax 0%");
		table.addCell("0");
		table.addCell("");
		table.addCell("Total");
		table.addCell(Double.toString(total));
		
		subCatPart.add(table);

	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	/**
	 * @return the bill
	 */
	public static Bill getBill() {
		return bill;
	}

	/**
	 * @param bill the bill to set
	 */
	public static void setBill(Bill bill) {
		PDFRender.bill = bill;
	}

}
